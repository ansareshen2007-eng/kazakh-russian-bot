import os
import asyncio
import logging
import httpx
from aiogram import Bot, Dispatcher, types

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN")
    raise SystemExit("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

TRANSLATE_URL = "https://libretranslate.de/translate"

async def translate_text(text: str, target_lang: str):
    async with httpx.AsyncClient() as client:
        response = await client.post(
            TRANSLATE_URL,
            data={
                "q": text,
                "source": "auto",
                "target": target_lang,
                "format": "text"
            },
            timeout=15
        )
        data = response.json()
        return data.get("translatedText", "")

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ üá∞üáø ‚áÑ üá∑üá∫\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º."
    )

@dp.message_handler(content_types=types.ContentType.TEXT)
async def translate_message(message: types.Message):
    text = message.text.strip()
    if not text:
        await message.reply("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return

    if any("\u0400" <= c <= "\u04FF" for c in text):
        target_lang = "kk"
        flag = "üá∑üá∫ ‚ûú üá∞üáø"
    else:
        target_lang = "ru"
        flag = "üá∞üáø ‚ûú üá∑üá∫"

    try:
        translated = await translate_text(text, target_lang)
        await message.reply(f"{flag}\n{translated}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ –ñ–¥—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
